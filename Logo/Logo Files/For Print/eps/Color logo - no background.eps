%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2394 612
%%HiResBoundingBox: 0 0 2394 611.03998
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2394 611.03998 re
W
q
[0.24 0 0 -0.24 0 611.03998] cm
q
0 0 9974.999 2542.9531 re
W*
q
[756.46539 0 0 755.99707 -263.83298 -571.08276] cm
/DeviceRGB {} CS
[0.3137 0.3765 0.5176] SC
/DeviceRGB {} cs
[0.3137 0.3765 0.5176] sc
0.76105 1.331 m
0.760259 1.338865 0.759974 1.346748 0.760194 1.354649 c
0.760413 1.36255 0.761137 1.370405 0.762363 1.378214 c
0.76359 1.386022 0.76531 1.393721 0.767523 1.401309 c
0.769736 1.408897 0.772425 1.416313 0.775589 1.423556 c
0.778753 1.4308 0.782366 1.437812 0.786429 1.444592 c
0.790492 1.451372 0.79497 1.457865 0.799865 1.464072 c
0.80476 1.470278 0.810031 1.476147 0.815679 1.481677 c
0.821326 1.487208 0.827303 1.492355 0.83361 1.49712 c
0.870509 1.527656 0.910429 1.553533 0.95337 1.57475 c
1.01823 1.60986 1.08194 1.64575 1.14994 1.67565 c
1.296035 1.738521 1.445035 1.793521 1.59694 1.84065 c
1.633547 1.852343 1.670253 1.86378 1.70706 1.87496 c
1.632604 1.866019 1.557881 1.861453 1.48289 1.86126 c
1.47877 1.85906 l
1.451375 1.844436 1.42295 1.832207 1.393494 1.822375 c
1.364038 1.812542 1.333966 1.805245 1.30328 1.800482 c
1.272594 1.795719 1.241725 1.793558 1.210674 1.793999 c
1.179623 1.79444 1.148829 1.797477 1.11829 1.80311 c
1.11141 1.80468 l
1.12141 1.80568 1.11688 1.80636 1.09761 1.8069 c
1.07714 1.81226 l
1.060547 1.817169 1.044313 1.823069 1.02844 1.82996 c
0.997363 1.844113 0.970513 1.86398 0.94789 1.88956 c
0.940165 1.8984 0.933279 1.907851 0.927231 1.917913 c
0.921183 1.927975 0.916069 1.938491 0.911888 1.949461 c
0.907708 1.960431 0.904525 1.971684 0.902342 1.983219 c
0.900159 1.994754 0.899008 2.006391 0.89889 2.01813 c
0.857955 2.050622 0.823991 2.089246 0.797 2.134 c
0.78945 2.147598 0.782724 2.161591 0.776822 2.175981 c
0.77092 2.19037 0.765883 2.205056 0.76171 2.220039 c
0.757537 2.235022 0.754258 2.250198 0.751872 2.265566 c
0.749486 2.280935 0.748011 2.296391 0.747445 2.311934 c
0.746879 2.327477 0.747227 2.342999 0.748489 2.358501 c
0.749751 2.374002 0.751918 2.389376 0.75499 2.404623 c
0.758062 2.419869 0.762018 2.434882 0.766858 2.449663 c
0.771698 2.464444 0.777389 2.478889 0.78393 2.493 c
0.798758 2.525435 0.815778 2.556674 0.83499 2.58672 c
0.854957 2.617575 0.876717 2.647108 0.90027 2.67532 c
0.948947 2.733264 1.002837 2.785868 1.06194 2.83313 c
1.179253 2.924846 1.304887 3.003226 1.43884 3.06827 c
1.51004 3.104663 1.582634 3.138633 1.65662 3.17018 c
1.64214 3.17818 l
1.63089 3.1849 1.620166 3.192374 1.609968 3.200603 c
1.59977 3.208831 1.590199 3.217734 1.581254 3.22731 c
1.572309 3.236885 1.564079 3.24704 1.556563 3.257775 c
1.549047 3.268509 1.54232 3.279717 1.536382 3.291398 c
1.530444 3.303079 1.525353 3.315119 1.521109 3.327516 c
1.516865 3.339914 1.51351 3.352547 1.511045 3.365417 c
1.508579 3.378287 1.507027 3.391266 1.506388 3.404354 c
1.505749 3.417443 1.50603 3.430511 1.50723 3.44356 c
1.50934 3.45441 1.512119 3.465085 1.515567 3.475586 c
1.519015 3.486088 1.523105 3.496333 1.527837 3.506321 c
1.532568 3.51631 1.537905 3.525965 1.543847 3.535285 c
1.549789 3.544605 1.556289 3.553517 1.563348 3.562023 c
1.570407 3.570528 1.577969 3.578559 1.586034 3.586117 c
1.5941 3.593674 1.602605 3.600699 1.611551 3.60719 c
1.620497 3.613682 1.629812 3.61959 1.639498 3.624914 c
1.649185 3.630238 1.659165 3.634937 1.66944 3.63901 c
1.713057 3.659172 1.75809 3.675406 1.804539 3.687712 c
1.850988 3.700019 1.898152 3.708211 1.94603 3.71229 c
2.026893 3.723189 2.107806 3.723579 2.18877 3.71346 c
2.299696 3.696686 2.406409 3.6655 2.50891 3.6199 c
2.554595 3.601185 2.59797 3.578124 2.639033 3.550717 c
2.680096 3.52331 2.718032 3.492101 2.75284 3.45709 c
2.811784 3.461077 2.870664 3.460297 2.92948 3.45475 c
2.959726 3.45246 2.989622 3.447885 3.019168 3.441026 c
3.048714 3.434167 3.077568 3.425103 3.105729 3.413834 c
3.13389 3.402565 3.161032 3.389222 3.187154 3.373805 c
3.213275 3.358388 3.238074 3.341077 3.26155 3.32187 c
3.264863 3.319562 3.268107 3.317162 3.271284 3.31467 c
3.27446 3.312177 3.277563 3.309597 3.280592 3.306928 c
3.283622 3.304259 3.286573 3.301506 3.289445 3.298669 c
3.292318 3.295832 3.295107 3.292916 3.297814 3.289921 c
3.300521 3.286925 3.30314 3.283855 3.305672 3.28071 c
3.308204 3.277565 3.310644 3.274351 3.312993 3.271068 c
3.315342 3.267784 3.317595 3.264436 3.319753 3.261024 c
3.321912 3.257612 3.323972 3.254142 3.325933 3.250613 c
3.327893 3.247083 3.329752 3.243501 3.331509 3.239866 c
3.333266 3.236231 3.334918 3.232549 3.336466 3.228821 c
3.338013 3.225092 3.339453 3.221322 3.340786 3.217511 c
3.342119 3.2137 3.343343 3.209854 3.344457 3.205973 c
3.345571 3.202093 3.346573 3.198184 3.347464 3.194246 c
3.348356 3.190308 3.349135 3.186348 3.349801 3.182367 c
3.350467 3.178385 3.351019 3.174387 3.351458 3.170373 c
3.351896 3.16636 3.35222 3.162337 3.35243 3.158306 c
3.352639 3.154274 3.352734 3.150239 3.352714 3.146202 c
3.352694 3.142165 3.35256 3.138131 3.35231 3.134102 c
3.352061 3.130072 3.351696 3.126053 3.351218 3.122044 c
3.35074 3.118035 3.350148 3.114043 3.349442 3.110068 c
3.348737 3.106093 3.347919 3.102141 3.346988 3.098213 c
3.346057 3.094284 3.345016 3.090385 3.343864 3.086516 c
3.342711 3.082646 3.341449 3.078813 3.340079 3.075015 c
3.338708 3.071218 3.337231 3.067463 3.335647 3.063749 c
3.334062 3.060036 3.332373 3.05637 3.330581 3.052753 c
3.328788 3.049136 3.326893 3.045572 3.324898 3.042063 c
3.322902 3.038553 3.320808 3.035103 3.318616 3.031713 c
3.316423 3.028323 3.314137 3.024998 3.311756 3.021738 c
3.309374 3.018477 3.306902 3.015287 3.304339 3.012168 c
3.301776 3.009048 3.299126 3.006005 3.29639 3.003036 c
3.293654 3.000067 3.290835 2.997178 3.287934 2.99437 c
3.285034 2.991562 3.282056 2.988838 3.279 2.9862 c
3.267 2.973533 3.25458 2.961346 3.24174 2.94964 c
3.25581 2.892312 3.261627 2.834159 3.25919 2.77518 c
3.254886 2.711582 3.243875 2.649166 3.226158 2.587934 c
3.208441 2.526702 3.184422 2.468051 3.1541 2.41198 c
3.122369 2.348946 3.086369 2.288453 3.0461 2.2305 c
3.25418 2.3145 3.45542 2.4125 3.66127 2.5005 c
3.792488 2.560913 3.927908 2.609649 4.06753 2.64671 c
4.11241 2.65733 4.15564 2.67148 4.20017 2.68278 c
4.2524 2.69602 4.33836 2.69866 4.36423 2.62131 c
4.366092 2.617596 4.367643 2.613757 4.368885 2.609792 c
4.370126 2.605828 4.371041 2.601789 4.371629 2.597677 c
4.372218 2.593564 4.372472 2.589431 4.372392 2.585278 c
4.372313 2.581124 4.3719 2.577004 4.371153 2.572917 c
4.370407 2.56883 4.369338 2.56483 4.367946 2.560916 c
4.366553 2.557002 4.364855 2.553225 4.362852 2.549585 c
4.360848 2.545946 4.358566 2.542491 4.356004 2.539221 c
4.353442 2.53595 4.350634 2.532906 4.34758 2.53009 c
4.285595 2.481374 4.219937 2.438252 4.150604 2.400724 c
4.081271 2.363197 4.009263 2.331806 3.93458 2.30655 c
3.7858 2.25289 3.63337 2.20705 3.47972 2.16467 c
3.30687 2.11695 3.13272 2.0724 2.95852 2.02789 c
2.928607 2.018277 2.898543 2.00898 2.86833 2 c
2.79982 1.920374 2.725043 1.847148 2.644 1.78032 c
2.525222 1.68254 2.399532 1.594643 2.266931 1.51663 c
2.134329 1.438617 1.996446 1.371447 1.85328 1.31512 c
1.738994 1.269311 1.621723 1.233193 1.501468 1.206767 c
1.381212 1.180341 1.259603 1.163966 1.13664 1.15764 c
1.112991 1.154765 1.089256 1.153496 1.065436 1.153832 c
1.041615 1.154168 1.017926 1.156107 0.994367 1.159647 c
0.970809 1.163188 0.947596 1.168299 0.924729 1.17498 c
0.901862 1.181661 0.879549 1.189851 0.85779 1.19955 c
0.845212 1.206042 0.833539 1.213882 0.822771 1.22307 c
0.812004 1.232258 0.802425 1.242552 0.794035 1.253952 c
0.785645 1.265353 0.778665 1.277559 0.773094 1.290572 c
0.767523 1.303584 0.763508 1.31706 0.76105 1.331 c
h
1.14848 2.13753 m
1.14682 2.13575 l
1.12465 2.111898 1.10483 2.086232 1.08736 2.05875 c
1.10799 2.05098 1.12864 2.04418 1.14764 2.03849 c
1.21023 2.019469 1.2741 2.007009 1.33925 2.00111 c
1.366497 1.998843 1.393607 1.997433 1.42058 1.99688 c
1.43396 2.00467 1.44701 2.01288 1.45958 2.02174 c
1.477268 2.034255 1.494125 2.047805 1.51015 2.06239 c
1.52664 2.0782 l
1.54989 2.10573 l
1.581675 2.145714 1.604822 2.190194 1.61933 2.23917 c
1.643267 2.311133 1.659454 2.3848 1.66789 2.46017 c
1.586567 2.426932 1.507673 2.388682 1.43121 2.34542 c
1.367187 2.308572 1.305943 2.267572 1.24748 2.22242 c
1.22259 2.20317 1.19782 2.18331 1.17436 2.16228 c
1.1571 2.14609 l
1.14848 2.13753 l
h
1.79488 2.50905 m
1.79528 2.44777 1.79827 2.38656 1.79345 2.32593 c
1.788535 2.256482 1.771958 2.189938 1.74372 2.1263 c
1.725151 2.084966 1.701577 2.046716 1.673 2.01155 c
1.69452 2.014217 1.71597 2.017187 1.73735 2.02046 c
1.794117 2.029067 1.850937 2.039267 1.90781 2.05106 c
1.908509 2.076654 1.912935 2.101586 1.921088 2.125857 c
1.929241 2.150127 1.940765 2.172675 1.95566 2.1935 c
1.983395 2.238433 2.014098 2.281236 2.04777 2.32191 c
2.09121 2.372831 2.13895 2.419338 2.19099 2.46143 c
2.119574 2.440612 2.046801 2.427108 1.97267 2.42092 c
1.965548 2.420883 1.95852 2.421682 1.951588 2.423317 c
1.944656 2.424953 1.938013 2.427379 1.931658 2.430596 c
1.925303 2.433813 1.919415 2.43773 1.913993 2.442349 c
1.908571 2.446967 1.903766 2.452158 1.89958 2.45792 c
1.895278 2.463518 1.891653 2.469524 1.888704 2.47594 c
1.885756 2.482354 1.883558 2.489017 1.882111 2.495927 c
1.880663 2.502837 1.880003 2.509822 1.880129 2.516881 c
1.880256 2.52394 1.881166 2.530896 1.88286 2.53775 c
1.88312 2.53901 l
1.83512 2.52313 l
1.79488 2.50905 l
h
2.83621 2.47111 m
2.85064 2.48538 l
2.86564 2.50196 l
2.879495 2.517873 2.892102 2.53472 2.903461 2.5525 c
2.914081 2.57105 l
2.909781 2.56331 2.919501 2.58389 2.921191 2.5889 c
2.925471 2.60707 l
2.925701 2.61126 l
2.925821 2.61318 l
2.924881 2.61818 l
2.924481 2.61918 l
2.923341 2.62164 l
2.919111 2.62704 l
2.91869 2.62755 l
2.908 2.63658 l
2.89825 2.64358 l
2.8765 2.65476 l
2.8545 2.66393 l
2.86914 2.65829 2.8445 2.66646 2.84393 2.66662 c
2.830518 2.670288 2.816952 2.673244 2.80323 2.67549 c
2.706657 2.601825 2.606051 2.534158 2.50141 2.47249 c
2.377972 2.401388 2.267169 2.314224 2.169 2.211 c
2.137228 2.173751 2.108341 2.134384 2.08234 2.0929 c
2.249357 2.137424 2.40956 2.199524 2.56295 2.2792 c
2.66279 2.330698 2.753877 2.394661 2.83621 2.47109 c
2.83621 2.47111 l
h
2.67583 2.8468 m
2.7285 2.84428 l
2.743681 2.85761 l
2.794554 2.903066 2.838698 2.95432 2.876111 3.01137 c
2.885111 3.02503 2.893821 3.0389 2.902001 3.05312 c
2.911821 3.07218 l
2.912311 3.07326 l
2.853397 3.067668 2.79652 3.053752 2.741681 3.03151 c
2.673923 3.009093 2.608689 2.980847 2.545981 2.94677 c
2.48626 2.911975 2.429323 2.873102 2.375171 2.83015 c
2.474937 2.843894 2.575157 2.849438 2.67583 2.84678 c
2.67583 2.8468 l
h
2.81413 2.2398 m
2.80761 2.23536 l
2.739212 2.190019 2.667952 2.149743 2.59383 2.11453 c
2.642857 2.126856 2.691954 2.139043 2.74112 2.15109 c
2.766167 2.179937 2.790503 2.20951 2.81413 2.23981 c
2.81413 2.2398 l
h
1.48639 2.88171 m
1.43701 2.85614 1.36778 2.81645 1.31047 2.77952 c
1.249792 2.740474 1.192126 2.697398 1.13747 2.65029 c
1.11169 2.62793 1.08702 2.60429 1.06321 2.5797 c
1.05188 2.568 l
1.03714 2.55177 l
1.02397 2.53706 1.01148 2.52177 0.9993 2.50618 c
0.978792 2.480131 0.960055 2.452864 0.94309 2.42438 c
0.93387 2.40838 l
0.9267 2.39388 l
0.920391 2.380216 0.914824 2.366256 0.91 2.352 c
0.901598 2.330575 0.896749 2.308374 0.895453 2.285397 c
0.894158 2.26242 0.89648 2.239814 0.90242 2.21758 c
0.90356 2.21113 l
0.911 2.194 l
0.9172 2.18186 l
0.91453 2.187 0.9223 2.17367 0.92366 2.17163 c
0.93648 2.15463 l
0.94921 2.17687 l
0.970559 2.211259 0.995312 2.242992 1.02347 2.27207 c
1.071388 2.319882 1.122778 2.363614 1.17764 2.403265 c
1.232502 2.442917 1.290149 2.477992 1.35058 2.50849 c
1.459006 2.565137 1.570574 2.614713 1.685285 2.657217 c
1.799996 2.69972 1.916931 2.734811 2.03609 2.76249 c
2.05361 2.77917 2.07155 2.7954 2.08947 2.81149 c
2.192909 2.909819 2.304509 2.997795 2.42427 3.07542 c
2.498126 3.120545 2.575793 3.157705 2.65727 3.1869 c
2.63627 3.18807 l
2.58432 3.18961 l
2.54666 3.19027 2.50932 3.18917 2.47219 3.18716 c
2.400731 3.183052 2.329778 3.174666 2.25933 3.162 c
2.25294 3.1609 l
2.24686 3.15968 l
2.22179 3.15468 l
2.17179 3.14368 l
2.13579 3.13535 2.10017 3.12597 2.06479 3.11596 c
1.99698 3.09683 1.93048 3.07449 1.86495 3.05021 c
1.73531 3.001805 1.609124 2.945641 1.48639 2.88172 c
1.48639 2.88171 l
h
2.40781 3.54537 m
2.351531 3.565804 2.293984 3.58163 2.23517 3.59285 c
2.21473 3.59692 2.194171 3.60012 2.173801 3.60263 c
2.169401 3.60312 l
2.16184 3.60375 l
2.132561 3.60518 l
2.046023 3.60766 1.960406 3.599933 1.87571 3.582 c
1.830221 3.572303 1.786084 3.558333 1.7433 3.54009 c
1.726939 3.533604 1.711479 3.525417 1.69692 3.51553 c
1.681031 3.505429 1.666328 3.493825 1.65281 3.48072 c
1.64692 3.47424 l
1.63892 3.46385 l
1.62626 3.4435 l
1.62991 3.44986 1.62144 3.43026 1.62026 3.42633 c
1.61766 3.41618 l
1.61946 3.42381 1.61689 3.40804 1.61673 3.40549 c
1.61643 3.40091 1.6165 3.39623 1.61654 3.3916 c
1.61654 3.38996 l
1.61687 3.3872 l
1.61826 3.376913 1.620373 3.366776 1.62321 3.35679 c
1.62379 3.35447 l
1.62536 3.35038 l
1.632 3.33438 l
1.63859 3.32165 l
1.63422 3.32979 1.64453 3.31354 1.64624 3.31126 c
1.65344 3.30272 l
1.64914 3.30763 1.65812 3.29839 1.6599 3.29685 c
1.67211 3.2871 l
1.67445 3.2853 l
1.67611 3.28436 l
1.685229 3.278928 1.694676 3.274141 1.70445 3.27 c
1.71418 3.26614 l
1.73123 3.26114 l
1.74215 3.25819 1.75323 3.25604 1.76423 3.25414 c
1.7813 3.25159 l
1.7926 3.25035 l
1.816148 3.248618 1.839718 3.248228 1.86331 3.24918 c
1.986299 3.291061 2.111786 3.323185 2.23977 3.34555 c
2.273264 3.35133 2.30706 3.356157 2.34116 3.36003 c
2.409026 3.386282 2.47823 3.408339 2.54877 3.4262 c
2.572443 3.431767 2.596347 3.436693 2.62048 3.44098 c
2.55406 3.484885 2.48317 3.519685 2.40781 3.54538 c
2.40781 3.54537 l
h
3.200141 3.09884 m
3.207808 3.108959 3.214661 3.119602 3.220701 3.13077 c
3.22344 3.13739 l
3.228611 3.15318 l
3.229661 3.15748 l
3.230431 3.17243 l
3.2297 3.177 l
3.22748 3.18542 l
3.22318 3.19499 l
3.22212 3.197 l
3.21969 3.20044 l
3.20708 3.21611 l
3.20694 3.21623 l
3.20172 3.22123 l
3.189308 3.232579 3.176102 3.242912 3.1621 3.25223 c
3.14903 3.26023 l
3.12871 3.27155 l
3.11496 3.27878 3.10088 3.28504 3.08671 3.29092 c
3.058443 3.301985 3.029409 3.310411 2.99961 3.3162 c
2.950133 3.326158 2.900163 3.330712 2.8497 3.32986 c
2.895047 3.317168 2.938451 3.299657 2.979911 3.277329 c
3.02137 3.255 3.059877 3.228397 3.09543 3.19752 c
3.132307 3.164481 3.163133 3.126528 3.18791 3.08366 c
3.200141 3.09884 l
h
3.080571 2.77225 m
3.082181 2.7861 3.08319 2.80018 3.083921 2.81431 c
3.084431 2.83438 l
3.04771 2.81232 3.00984 2.79193 2.97155 2.77254 c
3.001462 2.753325 3.026129 2.728828 3.045551 2.69905 c
3.059301 2.67386 l
3.065611 2.6954 3.071161 2.71744 3.075721 2.7398 c
3.077801 2.75138 l
3.080571 2.77225 l
h
0.992 1.321 m
1.01726 1.31934 l
1.05026 1.31864 l
1.07344 1.3185 1.0965 1.31927 1.11945 1.32056 c
1.15365 1.32243 1.18754 1.32575 1.22124 1.32956 c
1.291401 1.33879 1.360988 1.351233 1.43 1.366891 c
1.499012 1.382549 1.567155 1.401354 1.63443 1.423306 c
1.701705 1.445259 1.767825 1.470265 1.83279 1.498326 c
1.897755 1.526386 1.961288 1.557381 2.02339 1.59131 c
2.07571 1.61872 2.1489 1.66148 2.20728 1.69831 c
2.27228 1.73938 2.3352 1.78347 2.3962 1.83004 c
2.42338 1.85076 2.450253 1.872177 2.47682 1.89429 c
2.43882 1.88489 2.40043 1.87663 2.36134 1.87088 c
2.11224 1.80247 1.86489 1.73036 1.62096 1.64933 c
1.469696 1.601351 1.321569 1.545107 1.17658 1.4806 c
1.12232 1.4556 1.06899 1.42884 1.01563 1.40224 c
1.00798 1.39824 l
0.99757 1.39275 l
0.96641 1.37355 l
0.956407 1.366977 0.946864 1.359794 0.93778 1.352 c
0.93039 1.34511 l
0.923 1.33557 l
0.92314 1.33548 l
0.92754 1.3337 l
0.93376 1.33185 l
0.952865 1.326578 0.972278 1.322961 0.992 1.321 c
h
f
Q
q
[56.406898 0 0 56.371979 3533.6431 -89.455833] cm
/DeviceRGB {} CS
[0.6039 0.2235 0.8431] SC
/DeviceRGB {} cs
[0.6039 0.2235 0.8431] sc
19.040001 10.92 m
19.160002 11.480001 19.080002 38.120003 19.080002 38.799999 c
19.080002 40 18.640001 39.959999 17.840002 39.959999 c
16.640001 39.959999 14.960002 40.16 14.600002 39.759998 c
14.280003 39.48 8.360003 25.199997 7.520002 23.399998 c
7.440002 23.239998 7.240002 22.839998 7.080002 22.919998 c
6.880003 22.999998 6.960002 23.279999 6.960002 23.439999 c
6.920003 24.839998 7.160002 36.919998 7.160002 38.839996 c
7.160002 39.799995 7.120002 39.959995 6.320002 39.959995 c
4.320002 39.959995 l
3.800002 39.959995 3.160002 39.919994 2.640002 39.999996 c
2.240002 39.999996 2.040002 39.879997 2.000002 39.479996 c
2.000002 36.319996 l
2.080002 32.959995 2.000002 13.039995 2.000002 11.559996 c
2.000002 10.279996 2.360002 10.039995 3.640002 10.039995 c
4.520002 9.999995 5.400002 9.999995 6.280002 9.999995 c
6.560002 9.999995 6.720002 10.039995 6.880002 10.399995 c
7.960002 12.919994 12.560001 24.479996 13.280003 25.879993 c
13.400003 26.159994 13.840003 27.279993 14.080003 27.399994 c
14.120003 27.399994 l
14.280003 27.239994 14.240003 26.439995 14.240003 26.199993 c
14.240003 25.599993 13.920003 11.559993 13.920003 11.279993 c
13.920003 10.879993 13.800003 10.519993 14.000003 10.239993 c
14.120003 10.079993 14.640003 10.039993 14.840003 9.999993 c
15.960003 9.919993 17.280003 10.039993 18.400003 9.999993 c
18.960003 9.999993 18.920004 10.399993 19.040003 10.919993 c
19.040001 10.92 l
h
44.200001 17.360001 m
45.040001 19.84 45.240002 22.52 45.240002 25.16 c
45.240002 27.360001 44.84 29.48 44.280003 31.6 c
43.560001 34.119999 42.360001 36.400002 40.200005 37.880001 c
38.600006 39.040001 36.920006 39.800003 34.960007 40 c
34.680008 40 34.440006 40.040001 34.160007 40.040001 c
33.920006 40.040001 33.680008 40 33.400009 40 c
31.44001 39.799999 29.76001 39.040001 28.120008 37.880001 c
26.000008 36.400002 24.760008 34.120003 24.080009 31.6 c
23.480009 29.48 23.12001 27.360001 23.12001 25.16 c
23.12001 22.52 23.320011 19.84 24.160011 17.360001 c
25.640011 13.08 29.720011 10.040001 34.160011 9.960001 c
38.60001 10.040001 42.680012 13.080001 44.200012 17.360001 c
44.200001 17.360001 l
h
40.32 28.08 m
40.720001 25.639999 40.560001 23.16 40.079998 20.719999 c
39.599998 18.519999 38.639999 16.359999 36.799999 15.039999 c
36.48 14.799999 36.119999 14.599999 35.759998 14.479999 c
35.239998 14.239999 34.679996 14.159999 34.16 14.159999 c
33.640003 14.159999 33.119999 14.239999 32.599998 14.479999 c
32.199997 14.599999 31.879999 14.799998 31.559998 15.039999 c
29.679998 16.359999 28.719997 18.519999 28.279997 20.719999 c
27.799997 23.16 27.639997 25.639999 28.039997 28.08 c
28.439997 30.280001 29.239998 33.239998 31.319998 34.360001 c
32.199997 34.84 33.159996 35.16 34.159996 35.200001 c
35.159996 35.16 36.159996 34.84 37.039997 34.360001 c
39.119995 33.240002 39.919998 30.280001 40.319996 28.08 c
40.32 28.08 l
h
54.32 35.639999 m
54.360001 36.880001 54.360001 38.119999 54.400002 39.360001 c
54.400002 39.920002 54.440002 40 55 40 c
58.599998 40 l
59.359997 40 59.199997 38.720001 59.16 38.040001 c
59.279999 15.640001 l
59.279999 15.040001 59.48 14.840001 60.279999 14.840001 c
63.799999 14.840001 l
64.639999 14.840001 64.440002 13.400002 64.440002 12.400002 c
64.440002 11.520001 64.760002 10.000002 63.800003 10.000002 c
63.120003 10.000002 56.600002 10.000002 53.920002 10.040002 c
52.600002 10.040002 51.52 10.000002 50.200001 10.000002 c
49.200001 10.000002 49.240002 10.800002 49.240002 12.560001 c
49.240002 13.680001 49.200001 14.800001 50.16 14.800001 c
50.720001 14.800001 53 14.800001 53.639999 14.840001 c
54.040001 14.840001 54.32 14.960001 54.399998 15.400002 c
54.399998 15.520001 54.439999 15.640001 54.439999 15.760001 c
54.439999 18.640001 54.239998 32.040001 54.32 35.639999 c
h
68.519997 31.799999 m
68.479996 31.799999 l
68.479996 32.799999 68.439995 33.84 68.479996 34.879997 c
68.519997 36.159996 68.599998 37.439999 68.679993 38.719997 c
68.679993 39.159996 68.799995 39.279999 69.199989 39.359997 c
70.039986 39.559998 70.839989 39.599998 71.679993 39.599998 c
73.839996 39.519997 75.999992 39.68 78.159996 39.599998 c
79.039993 39.559998 79.439995 39.639999 80.32 39.48 c
81.120003 39.32 81.400002 38.880001 81.400002 37.68 c
81.32 36.920002 81.360001 36.599998 81.360001 35.68 c
81.360001 34.360001 80.440002 33.920002 79.639999 33.959999 c
79.080002 34 76.400002 33.919998 75.32 33.919998 c
73.519997 33.959999 73.800003 34.199997 73.800003 32.32 c
73.800003 30.799999 73.840004 28.84 73.840004 27.279999 c
73.840004 26.439999 73.920006 26.159998 74.720001 26.159998 c
79.720001 26.159998 l
80.520004 26.279999 81.080002 25.719997 81.080002 24.879997 c
81.080002 24.039997 81.160004 23.999998 81.160004 23.159998 c
81.040001 21.959997 l
80.959999 21.279997 80.720001 21.039997 80.040001 21.039997 c
79.599998 21.039997 79.160004 21.079998 78.720001 21.119997 c
77 21.239998 76.200005 20.999996 74.520004 21.119997 c
73.960007 21.119997 73.880005 21.039997 73.840004 20.519997 c
73.68 18.959997 73.840004 17.239996 74.000008 15.679997 c
74.040009 15.039996 74.200005 14.919996 74.800011 14.879996 c
80.44001 14.839996 l
81.200012 14.759996 81.44001 14.799996 81.400009 14.039996 c
81.320007 12.879996 81.44001 11.679997 81.320007 10.519997 c
81.240005 9.879996 81.040009 9.759996 80.320007 9.759996 c
79.12001 9.799996 78.840004 9.799996 77.640007 9.879996 c
76.44001 9.919996 71.640007 9.919996 70.480011 9.919996 c
68.800011 9.919996 68.680008 9.799996 68.640015 11.839996 c
68.560013 13.439997 68.600014 15.079996 68.600014 16.719997 c
68.600014 19.519997 68.44001 29.559998 68.520012 31.799997 c
68.519997 31.799999 l
h
93.559998 9.8 m
92.799995 9.84 92.040001 9.96 91.279999 10.2 c
89.639999 10.76 88.159996 11.88 87.159996 13.32 c
86.279999 14.639999 85.919998 16.200001 85.799995 17.76 c
85.719994 18.960001 85.839996 20.200001 86.399994 21.280001 c
86.999992 22.440001 88.039993 23.440001 88.919991 24.400002 c
89.719994 25.240002 90.519989 26.080002 91.399994 26.840002 c
92.199997 27.600002 93.119995 28.200003 93.919991 29.000002 c
95.079994 30.160002 95.519989 32.800003 94.679993 34.240002 c
93.679993 35.84 91.319992 36.080002 89.759995 35.560001 c
88.959991 35.280003 88.239998 34.68 87.559998 34.200001 c
87.159996 33.920002 86.68 33.799999 86.399994 34.280003 c
86.23999 34.520004 86.159996 34.800003 86.079994 35.040001 c
85.799995 36.040001 85.439995 36.959999 85.399994 38.040001 c
85.359993 39.280003 87.719994 39.639999 88.599991 39.84 c
92.519989 40.759998 97.23999 40.040001 99.279991 36.16 c
99.679993 35.360001 99.959991 34.52 100.119987 33.639999 c
100.159988 33.32 100.199989 33.040001 100.199989 32.720001 c
100.359993 30.160002 99.319992 28.000002 97.759987 26.080002 c
96.079987 24.000002 93.959984 22.560001 91.999985 20.760002 c
90.799988 19.640001 90.359985 17.880001 90.719986 16.280003 c
91.079987 14.560002 93.039986 14.120003 94.519989 14.560002 c
94.959991 14.680002 95.319992 14.880002 95.719986 15.120003 c
95.959984 15.240003 96.199989 15.400003 96.519989 15.400003 c
97.079987 15.440002 97.159988 15.000003 97.279991 14.560002 c
97.55999 13.560002 98.039993 12.760002 98.23999 11.800002 c
98.439987 10.720002 97.55999 10.520002 96.679993 10.240002 c
95.639992 9.960002 94.639992 9.760002 93.55999 9.800002 c
93.559998 9.8 l
h
106.440002 13.44 m
106.920006 12.28 l
107.240005 11.679999 108.360008 9.2 108.760002 8.599999 c
108.920006 8.36 108.880005 8.119999 108.560005 8.119999 c
107.640007 8.119999 106.760002 8.079999 105.840004 7.999999 c
105.360001 7.959999 105.120003 8.519999 105.000008 8.919999 c
104.800011 9.56 104.640007 10.239999 104.480011 10.879999 c
104.200012 12.239999 103.960014 13.599999 103.800011 14.959999 c
103.800011 15.199999 103.76001 15.439999 103.840012 15.679999 c
103.920013 15.92 104.12001 16.16 104.400009 16.199999 c
104.680008 16.199999 104.920006 15.959999 105.080009 15.759999 c
105.640007 15.079999 106.080009 14.279999 106.44001 13.44 c
106.440002 13.44 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
